const mongoose=require("mongoose");
const bonusTemplateSchema = new mongoose.Schema({
    name: {type:String, unique:false,trim:true},
    site:{type:String}, 
    bonusType:{type:String, enum: ['REGISTRATION', 'DEPOSIT','JOURNEY']},
    bonusCode: {type:String, unique:false,trim:true},
    ibAmount: Number,
    bbAmount: Number,
    ticketData: Array,
    bonusBenefit: {
        ibBenefit:{
            offerType:{type:String, enum: ['PERCENTAGE', 'FORALL','FORSLOT']},
            offerAmount:{
                cc_offer:Number,
                dc_offer:Number,
                net_Offer:Number,
                cod_offer:Number,
                upi_offer:Number,
                wallet_offer:Number,
                wallet_id:Number,
                maxChips:Number,
                chips:Number,
                slots:[{depositStart:Number,
                depositEnd:Number,
                chips:Number,
                }],
            }
        },
        bbBenefit:{
            offerType:{type:String, enum: ['PERCENTAGE', 'FORALL','FORSLOT']},
            offerAmount:{
                cc_offer:Number,
                dc_offer:Number,
                net_Offer:Number,
                cod_offer:Number,
                upi_offer:Number,
                wallet_offer:Number,
                wallet_id:Number,
                maxChips:Number,
                chips:Number,
                slots:[{depositStart:Number,
                depositEnd:Number,
                chips:Number,
                }],
            }
        },
        ticketBenefit:{
            offerType:{type:String, enum: ['PERCENTAGE', 'FORALL','FORSLOT']},
            offerAmount:{
                cc_offer:Number,
                dc_offer:Number,
                net_Offer:Number,
                cod_offer:Number,
                upi_offer:Number,
                wallet_offer:Number,
                wallet_id:Number,
                maxChips:Number,
                chips:Number,
                autoRegister:Boolean,
                slots:[{depositStart:Number,
                depositEnd:Number,
                ticketData:[{
                    ticketName:String,
                    noOfTicket:Number,
                }],
                
                }],
            }
        },
        otpcBenefit:Number,
        freerollBenefit:{
            offerType:{type:String, enum: ['PERCENTAGE', 'FORALL','FORSLOT']},
            offerAmount:{
                cc_offer:Number,
                dc_offer:Number,
                net_Offer:Number,
                cod_offer:Number,
                upi_offer:Number,
                wallet_offer:Number,
                wallet_id:Number,
                maxChips:Number,
                chips:Number,
                slots:[{depositStart:Number,
                depositEnd:Number,
                chips:Number,
                }],
            }
        },
        tourneyBonus:{
            offerType:{type:String, enum: ['PERCENTAGE', 'FORALL','FORSLOT']},
            offerAmount:{
                cc_offer:Number,
                dc_offer:Number,
                net_Offer:Number,
                cod_offer:Number,
                upi_offer:Number,
                wallet_offer:Number,
                wallet_id:Number,
                maxChips:Number,
                chips:Number,
                slots:[{depositStart:Number,
                depositEnd:Number,
                chips:Number,
                }],
            }
        },
    },
    journeyBenefit :[{day:Number,benefits:{},emailTemplateId:String,smsTemplateId:String}],
    bonusTemplateId:Number,
    codeType:{type:String,trim:true,enum:['Regular','FlashCSV','UserSpecificExpiry','Segments']},
    //*segmentIds:[{type : Number}],
    noOfUsage:{type:String,trim:true,enum:['SingleLifeTime','Multiple','Daily','Weekly','Monthly']},
    noOfUsageDays:Number,
    depositorType :	{type:String,trim:true,enum:['nthTimeOnwards','AnyDeposit']},
    nthDeposit : Number,
    maxUsageCount :Number,
    overallUsageLimit:Number,
    message:{type:String,trim:true},
    minDepositAmount:Number,
    affiliateTagging:{type:String,trim:true},
    visibleOnBuychips:Boolean,
    owner:{type:String,trim:true,enum:['OTHER','CRM-REACTIVATION','CRM-SUPPORT','TOURNEY','CASH','ACQUISITION']},
    releaseUnit:Number,
    releaseUnitType:{type:String, enum: ['fixed', 'multiplier']},
    timeBoundRedemption:Boolean,
    redemptionExpiryTime:Date,
    archived:{type :Boolean,default:0},
    expiredAfter:{ type: Number, default: 90 },
    status:{type:String, enum: ['ACTIVE', 'INACTIVE','PENDING']},
    validity : [{startDate : Date,endDate : Date}],
    createdBy:String,
    approvedBy:String,
    startDate:Date,
    endDate:Date,
    devices: {type:Array , trim:true},
    channel: {type:Array, trim:true},
    campaign: String
}, {
    timestamps: true
});
module.exports= mongoose.model("bonusTemplate",bonusTemplateSchema)
